source("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/helpers.R")
library(FBMS)
results
summary(results)
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
rownames <- c("Pow","F1","F2","F3","F4","Count_P","Count_FP","FDR","Correlation_P","Correlation_FP","MAE","Time","Correlation_P_Med",
"Correlation_P_Max","Correlation_P_Min","Correlation_FP_Med","Correlation_FP_Max","Correlation_FP_Min","MAE_Med","MAE_Max",
"MAE_Min", "R_Med", "R_Min", "R_Max", "LMP_Med", "LMP_Min", "LMP_Max", "pos_Med","pos_Min","pos_max")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
features_df <- feature_results[feature_results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Pow",experiment] <- mean(apply(exp_df[c("F1","F2","F3","F4")], 1, any))
Metrics["F1",experiment] <- sum(as.logical(exp_df$F1))
Metrics["F2",experiment] <- sum(as.logical(exp_df$F2))
Metrics["F3",experiment] <- sum(as.logical(exp_df$F3))
Metrics["F4",experiment] <- sum(as.logical(exp_df$F4))
Metrics["Count_P",experiment] <- mean(as.integer(exp_df$Count_P))
Metrics["Count_FP",experiment] <- mean(as.integer(exp_df$Count_FP))
Metrics["FDR",experiment] <- mean(as.integer(exp_df$Count_FP)/as.integer(exp_df$Count_P))
Metrics["Correlation_P",experiment] <- mean(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP",experiment] <- mean(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Med",experiment] <- median(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Med",experiment] <- median(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Max",experiment] <- max(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Max",experiment] <- max(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Min",experiment] <- min(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Min",experiment] <- min(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["MAE",experiment] <- mean(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Med",experiment] <- median(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Min",experiment] <- min(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Max",experiment] <- max(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["LMP_Med",experiment] <- median(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Min",experiment] <- min(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Max",experiment] <- max(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["R_Med",experiment] <- median(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Min",experiment] <- min(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Max",experiment] <- max(as.numeric(exp_df$R2), na.rm = TRUE)
list_of_margs <- max_prob_tp(10,features_df)
cat(list_of_margs)
Metrics["pos_Med",experiment] <- median(list_of_margs, na.rm = TRUE)
Metrics["pos_Min",experiment] <- min(list_of_margs, na.rm = TRUE)
Metrics["pos_Max",experiment] <- max(list_of_margs, na.rm = TRUE)
Metrics["Time",experiment] <- mean(as.numeric(exp_df$Time))
}
Metrics
colnames <- c("S1","S2","S3","S4","S5","S6")
rownames <- c("Pow","F1","F2","F3","F4","Count_P","Count_FP","FDR","Correlation_P","Correlation_FP","MAE","Time","Correlation_P_Med",
"Correlation_P_Max","Correlation_P_Min","Correlation_FP_Med","Correlation_FP_Max","Correlation_FP_Min","MAE_Med","MAE_Max",
"MAE_Min", "R_Med", "R_Min", "R_Max", "LMP_Med", "LMP_Min", "LMP_Max", "pos_Med","pos_Min","pos_max")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
features_df <- feature_results[feature_results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Pow",experiment] <- mean(apply(exp_df[c("F1","F2","F3","F4")], 1, any))
Metrics["F1",experiment] <- sum(as.logical(exp_df$F1))
Metrics["F2",experiment] <- sum(as.logical(exp_df$F2))
Metrics["F3",experiment] <- sum(as.logical(exp_df$F3))
Metrics["F4",experiment] <- sum(as.logical(exp_df$F4))
Metrics["Count_P",experiment] <- mean(as.integer(exp_df$Count_P))
Metrics["Count_FP",experiment] <- mean(as.integer(exp_df$Count_FP))
Metrics["FDR",experiment] <- mean(as.integer(exp_df$Count_FP)/as.integer(exp_df$Count_P))
Metrics["Correlation_P",experiment] <- mean(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP",experiment] <- mean(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Med",experiment] <- median(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Med",experiment] <- median(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Max",experiment] <- max(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Max",experiment] <- max(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Min",experiment] <- min(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Min",experiment] <- min(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["MAE",experiment] <- mean(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Med",experiment] <- median(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Min",experiment] <- min(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Max",experiment] <- max(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["LMP_Med",experiment] <- median(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Min",experiment] <- min(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Max",experiment] <- max(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["R_Med",experiment] <- median(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Min",experiment] <- min(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Max",experiment] <- max(as.numeric(exp_df$R2), na.rm = TRUE)
list_of_margs <- max_prob_tp(10,features_df)
cat(list_of_margs)
Metrics["pos_Med",experiment] <- median(list_of_margs, na.rm = TRUE)
Metrics["pos_Min",experiment] <- min(list_of_margs, na.rm = TRUE)
Metrics["pos_Max",experiment] <- max(list_of_margs, na.rm = TRUE)
Metrics["Time",experiment] <- mean(as.numeric(exp_df$Time))
}
Metrics
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
colnames <- c("S1","S2","S3","S4","S5","S6")
rownames <- c("Pow","F1","F2","F3","F4","Count_P","Count_FP","FDR","Correlation_P","Correlation_FP","MAE","Time","Correlation_P_Med",
"Correlation_P_Max","Correlation_P_Min","Correlation_FP_Med","Correlation_FP_Max","Correlation_FP_Min","MAE_Med","MAE_Max",
"MAE_Min", "R_Med", "R_Min", "R_Max", "LMP_Med", "LMP_Min", "LMP_Max", "pos_Med","pos_Min","pos_Max")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
features_df <- feature_results[feature_results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Pow",experiment] <- mean(apply(exp_df[c("F1","F2","F3","F4")], 1, any))
Metrics["F1",experiment] <- sum(as.logical(exp_df$F1))
Metrics["F2",experiment] <- sum(as.logical(exp_df$F2))
Metrics["F3",experiment] <- sum(as.logical(exp_df$F3))
Metrics["F4",experiment] <- sum(as.logical(exp_df$F4))
Metrics["Count_P",experiment] <- mean(as.integer(exp_df$Count_P))
Metrics["Count_FP",experiment] <- mean(as.integer(exp_df$Count_FP))
Metrics["FDR",experiment] <- mean(as.integer(exp_df$Count_FP)/as.integer(exp_df$Count_P))
Metrics["Correlation_P",experiment] <- mean(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP",experiment] <- mean(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Med",experiment] <- median(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Med",experiment] <- median(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Max",experiment] <- max(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Max",experiment] <- max(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Min",experiment] <- min(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Min",experiment] <- min(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["MAE",experiment] <- mean(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Med",experiment] <- median(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Min",experiment] <- min(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Max",experiment] <- max(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["LMP_Med",experiment] <- median(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Min",experiment] <- min(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Max",experiment] <- max(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["R_Med",experiment] <- median(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Min",experiment] <- min(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Max",experiment] <- max(as.numeric(exp_df$R2), na.rm = TRUE)
list_of_margs <- max_prob_tp(10,features_df)
cat(list_of_margs)
Metrics["pos_Med",experiment] <- median(list_of_margs, na.rm = TRUE)
Metrics["pos_Min",experiment] <- min(list_of_margs, na.rm = TRUE)
Metrics["pos_Max",experiment] <- max(list_of_margs, na.rm = TRUE)
Metrics["Time",experiment] <- mean(as.numeric(exp_df$Time))
}
Metrics
results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/Extended/Results/Single_results/merged_results_mod.csv")
feature_results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/Extended/Results/Single_results/merged_features_mod.csv")
source("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/helpers.R")
library(FBMS)
results
summary(results)
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
colnames <- c("S1","S2","S3","S4","S5","S6")
rownames <- c("Pow","F1","F2","F3","F4","Count_P","Count_FP","FDR","Correlation_P","Correlation_FP","MAE","Time","Correlation_P_Med",
"Correlation_P_Max","Correlation_P_Min","Correlation_FP_Med","Correlation_FP_Max","Correlation_FP_Min","MAE_Med","MAE_Max",
"MAE_Min", "R_Med", "R_Min", "R_Max", "LMP_Med", "LMP_Min", "LMP_Max", "pos_Med","pos_Min","pos_Max")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
features_df <- feature_results[feature_results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Pow",experiment] <- mean(apply(exp_df[c("F1","F2","F3","F4")], 1, any))
Metrics["F1",experiment] <- sum(as.logical(exp_df$F1))
Metrics["F2",experiment] <- sum(as.logical(exp_df$F2))
Metrics["F3",experiment] <- sum(as.logical(exp_df$F3))
Metrics["F4",experiment] <- sum(as.logical(exp_df$F4))
Metrics["Count_P",experiment] <- mean(as.integer(exp_df$Count_P))
Metrics["Count_FP",experiment] <- mean(as.integer(exp_df$Count_FP))
Metrics["FDR",experiment] <- mean(as.integer(exp_df$Count_FP)/as.integer(exp_df$Count_P))
Metrics["Correlation_P",experiment] <- mean(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP",experiment] <- mean(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Med",experiment] <- median(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Med",experiment] <- median(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Max",experiment] <- max(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Max",experiment] <- max(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Min",experiment] <- min(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Min",experiment] <- min(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["MAE",experiment] <- mean(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Med",experiment] <- median(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Min",experiment] <- min(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Max",experiment] <- max(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["LMP_Med",experiment] <- median(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Min",experiment] <- min(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Max",experiment] <- max(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["R_Med",experiment] <- median(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Min",experiment] <- min(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Max",experiment] <- max(as.numeric(exp_df$R2), na.rm = TRUE)
list_of_margs <- max_prob_tp(10,features_df)
cat(list_of_margs)
Metrics["pos_Med",experiment] <- median(list_of_margs, na.rm = TRUE)
Metrics["pos_Min",experiment] <- min(list_of_margs, na.rm = TRUE)
Metrics["pos_Max",experiment] <- max(list_of_margs, na.rm = TRUE)
Metrics["Time",experiment] <- mean(as.numeric(exp_df$Time))
}
Metrics
results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/Extended/Housing_results_single/merged_results.csv")
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
rownames <- c("Correlation","MAE","RMSE","Time")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Correlation",experiment] <- mean(exp_df$Correlation)
Metrics["Corr_Med",experiment] <- median(as.numeric(exp_df$Correlation), na.rm = TRUE)
Metrics["Corr_Min",experiment] <- min(as.numeric(exp_df$Correlation), na.rm = TRUE)
Metrics["Corr_Max",experiment] <- max(as.numeric(exp_df$Correlation), na.rm = TRUE)
Metrics["MAE",experiment] <- mean(exp_df$MAE, na.rm = TRUE)
Metrics["MAE_Med",experiment] <- median(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Min",experiment] <- min(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Max",experiment] <- max(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["RMSE",experiment] <- mean(exp_df$RMSE, na.rm = TRUE)
Metrics["RMSE_Med",experiment] <- median(as.numeric(exp_df$RMSE), na.rm = TRUE)
Metrics["RMSE_Min",experiment] <- min(as.numeric(exp_df$RMSE), na.rm = TRUE)
Metrics["RMSE_Max",experiment] <- max(as.numeric(exp_df$RMSE), na.rm = TRUE)
Metrics["LMP_Med",experiment] <- median(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Min",experiment] <- min(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Max",experiment] <- max(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["R_Med",experiment] <- median(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Min",experiment] <- min(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Max",experiment] <- max(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["Time",experiment] <- max(as.numeric(exp_df$Time), na.rm = TRUE)
}
Metrics
test <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/test.csv")
features <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/Extended/Housing_results_single/11/features_11.csv")
df_s2 <- features[features$Experiment=="S2"]
for (feature in df_s2$Feature) {
print(feature)
}
features
features$Experiment
df_s2 <- features[features$Experiment=="S2",]
test <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/test.csv")
features <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/Extended/Housing_results_single/11/features_11.csv")
df_s2 <- features[features$Experiment=="S2",]
for (feature in df_s2$Feature) {
print(feature)
}
library(FBMS)
test <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/test.csv")
features <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Housing/Extended/Housing_results_single/11/features_11.csv")
df_s2 <- features[features$Experiment=="S2",]
for (feature in df_s2$Feature) {
print(feature)
}
test
sigmoid(test$LSTAT)
for (feature in df_s2$Feature) {
print(feature)
}
exp_dbl(test$LSTAT)
test
exp_dbl(test$PTRATIO)
max(exp_dbl(test$PTRATIO))
min(exp_dbl(test$PTRATIO))
max(exp_dbl(test$LSTAT))
min(exp_dbl(test$LSTAT))
for (feature in df_s2$Feature) {
print(feature)
}
test
troot(test$INDUS)
for (feature in df_s2$Feature) {
print(feature)
}
test
sigmoid(test$LSTAT)
min(exp_dbl(test$LSTAT))
min(exp_dbl(test$PTRATIO))
troot(test$INDUS)
for (feature in df_s2$Feature) {
print(feature)
}
results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/Extended/Results/Single_results/merged_results_mod.csv")
feature_results <- read.csv("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/Extended/Results/Single_results/merged_features_mod.csv")
source("/Users/ylvasofietollefsen/Documents/Uio/Master/Experiments/Kepler/helpers.R")
library(FBMS)
results
s1 <- feature_results[feature_results$Experiment=="S1",]
s2 <- feature_results[feature_results$Experiment=="S2",]
list_of_s1 <- max_prob_tp(10,s1)
list_of_s2 <- max_prob_tp(10,s2)
density(list_of_s1)
density(list_of_s2)
list_of_s1
list_of_s2
list_of_s3 <- max_prob_tp(10,s3)
list_of_s4 <- max_prob_tp(10,s4)
s1 <- feature_results[feature_results$Experiment=="S1",]
s2 <- feature_results[feature_results$Experiment=="S2",]
s3 <- feature_results[feature_results$Experiment=="S3",]
s4 <- feature_results[feature_results$Experiment=="S4",]
list_of_s1 <- max_prob_tp(10,s1)
list_of_s2 <- max_prob_tp(10,s2)
density(list_of_s1)
density(list_of_s2)
list_of_s1
list_of_s1
list_of_s2
list_of_s3 <- max_prob_tp(10,s3)
list_of_s4 <- max_prob_tp(10,s4)
list_of_s3
list_of_s4
s5 <- feature_results[feature_results$Experiment=="S5",]
s6 <- feature_results[feature_results$Experiment=="S6",]
list_of_s5 <- max_prob_tp(10,s5)
list_of_s6 <- max_prob_tp(10,s6)
list_of_s5
list_of_s6
colnames <- c("S1","S2","S3","S4","S5","S6","P1","P2","P3","P4","P5","P6")
colnames <- c("S1","S2","S3","S4","S5","S6")
rownames <- c("Pow","F1","F2","F3","F4","Count_P","Count_FP","FDR","Correlation_P","Correlation_FP","MAE","Time","Correlation_P_Med",
"Correlation_P_Max","Correlation_P_Min","Correlation_FP_Med","Correlation_FP_Max","Correlation_FP_Min","MAE_Med","MAE_Max",
"MAE_Min", "R_Med", "R_Min", "R_Max", "LMP_Med", "LMP_Min", "LMP_Max", "pos_Med","pos_Min","pos_Max")
Metrics <- data.frame(matrix(ncol = length(colnames), nrow = length(rownames)))
colnames(Metrics) <- colnames
rownames(Metrics) <- rownames
for (experiment in colnames) {
exp_df <- results[results$Experiment==experiment,]
features_df <- feature_results[feature_results$Experiment==experiment,]
exp_df <- exp_df[rowSums(is.na(exp_df)) != ncol(exp_df), ]
Metrics["Pow",experiment] <- mean(apply(exp_df[c("F1","F2","F3","F4")], 1, any))
Metrics["F1",experiment] <- sum(as.logical(exp_df$F1))
Metrics["F2",experiment] <- sum(as.logical(exp_df$F2))
Metrics["F3",experiment] <- sum(as.logical(exp_df$F3))
Metrics["F4",experiment] <- sum(as.logical(exp_df$F4))
Metrics["Count_P",experiment] <- mean(as.integer(exp_df$Count_P))
Metrics["Count_FP",experiment] <- mean(as.integer(exp_df$Count_FP))
Metrics["FDR",experiment] <- mean(as.integer(exp_df$Count_FP)/as.integer(exp_df$Count_P))
Metrics["Correlation_P",experiment] <- mean(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP",experiment] <- mean(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Med",experiment] <- median(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Med",experiment] <- median(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Max",experiment] <- max(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Max",experiment] <- max(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["Correlation_P_Min",experiment] <- min(as.numeric(exp_df$Correlation))
Metrics["Correlation_FP_Min",experiment] <- min(as.numeric(exp_df$Correlation_FP), na.rm = TRUE)
Metrics["MAE",experiment] <- mean(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Med",experiment] <- median(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Min",experiment] <- min(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["MAE_Max",experiment] <- max(as.numeric(exp_df$MAE), na.rm = TRUE)
Metrics["LMP_Med",experiment] <- median(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Min",experiment] <- min(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["LMP_Max",experiment] <- max(as.numeric(exp_df$LMP), na.rm = TRUE)
Metrics["R_Med",experiment] <- median(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Min",experiment] <- min(as.numeric(exp_df$R2), na.rm = TRUE)
Metrics["R_Max",experiment] <- max(as.numeric(exp_df$R2), na.rm = TRUE)
list_of_margs <- max_prob_tp(10,features_df)
cat(list_of_margs)
Metrics["pos_Med",experiment] <- median(list_of_margs, na.rm = TRUE)
Metrics["pos_Min",experiment] <- min(list_of_margs, na.rm = TRUE)
Metrics["pos_Max",experiment] <- max(list_of_margs, na.rm = TRUE)
Metrics["Time",experiment] <- mean(as.numeric(exp_df$Time))
}
Metrics
library(pmlbr)
library(FBMS)
results = list()
transforms <- c("p3","p2","troot","sigmoid","sin_deg","cos_deg")
for(data_name in pmlbr::regression_dataset_names)
{
data =  pmlbr::fetch_data(data_name)
n = dim(data)[1]
p = dim(data)[2]
results[[data_name]]$R2 = rep(NA,11)
results[[data_name]]$C = rep(NA,11)
results[[data_name]]$n = n
results[[data_name]]$p = p
if(n>20000)
next
for(sim in 1:10)
{
set.seed(sim)
idt = sample.int(n = n,size = as.integer(n*0.75),replace = F)
train = data[idt,]
test = data[-idt,]
try({
lr = fbms(formula = target ~ .,data = train,family = "gaussian",method = "gmjmcmc.parallel",transforms = transforms, runs = 20,cores = 20, P = 20)
print(summary(lr))
y.hat = predict(lr,test)$aggr$mean
y.hat.tr = predict(lr,train)$aggr$mean
R2 = cor(y.hat,test$target)^2
R2.tr = cor(y.hat.tr,train$target)^2
results[[data_name]]$R2[sim] = R2
results[[data_name]]$C[sim] = R2.tr
})
}
results[[data_name]]$R2[11] = median(results[[data_name]]$R2[1:10],na.rm = T)
results[[data_name]]$C[11] = median(results[[data_name]]$C[1:10],na.rm = T)
cat(data_name,results[[data_name]]$R2[11])
}
for(data_name in pmlbr::regression_dataset_names)
{
data =  pmlbr::fetch_data(data_name)
n = dim(data)[1]
p = dim(data)[2]
results[[data_name]]$R2 = rep(NA,11)
results[[data_name]]$C = rep(NA,11)
results[[data_name]]$n = n
results[[data_name]]$p = p
if(n>20000)
next
for(sim in 1:10)
{
set.seed(sim)
print(sim)
idt = sample.int(n = n,size = as.integer(n*0.75),replace = F)
train = data[idt,]
test = data[-idt,]
try({
lr = fbms(formula = target ~ .,data = train,family = "gaussian",method = "gmjmcmc.parallel",transforms = transforms, runs = 20,cores = 20, P = 20)
print(summary(lr))
y.hat = predict(lr,test)$aggr$mean
y.hat.tr = predict(lr,train)$aggr$mean
R2 = cor(y.hat,test$target)^2
R2.tr = cor(y.hat.tr,train$target)^2
results[[data_name]]$R2[sim] = R2
results[[data_name]]$C[sim] = R2.tr
})
}
results[[data_name]]$R2[11] = median(results[[data_name]]$R2[1:10],na.rm = T)
results[[data_name]]$C[11] = median(results[[data_name]]$C[1:10],na.rm = T)
cat(data_name,results[[data_name]]$R2[11])
}
pmlbr::regression_dataset_names
for(data_name in pmlbr::regression_dataset_names)
{
data =  pmlbr::fetch_data(data_name)
n = dim(data)[1]
p = dim(data)[2]
results[[data_name]]$R2 = rep(NA,11)
results[[data_name]]$C = rep(NA,11)
results[[data_name]]$n = n
results[[data_name]]$p = p
if(n>20000)
next
for(sim in 1:10)
{
set.seed(sim)
print(sim)
idt = sample.int(n = n,size = as.integer(n*0.75),replace = F)
train = data[idt,]
test = data[-idt,]
try({
lr = fbms(formula = target ~ .,data = train,family = "gaussian",method = "gmjmcmc",transforms = transforms, P = 20)
print(summary(lr))
y.hat = predict(lr,test)$aggr$mean
y.hat.tr = predict(lr,train)$aggr$mean
R2 = cor(y.hat,test$target)^2
R2.tr = cor(y.hat.tr,train$target)^2
results[[data_name]]$R2[sim] = R2
results[[data_name]]$C[sim] = R2.tr
})
}
results[[data_name]]$R2[11] = median(results[[data_name]]$R2[1:10],na.rm = T)
results[[data_name]]$C[11] = median(results[[data_name]]$C[1:10],na.rm = T)
cat(data_name,results[[data_name]]$R2[11])
}
library(pmlbr)
source("./PMLBR/config_pmlbr.R")
library(devtools)
install_github("ylvast/GMJMCMC@FBMSY")
library(FBMS)
pmlbr::regression_dataset_names
length(pmlbr::regression_dataset_names)
pmlbr::fetch_data(pmlbr::regression_dataset_names[1])
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
# Parallel results without noise, comment in
results <- read.csv("./Results/Parallel_results/merged_results.csv")
feature_results <- read.csv("./Results/Parallel_results/merged_features.csv")
results
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/metrics_ex.R")
Metrics
source("./config_ex.R")
source("./config_ex.R")
source("../helpers.R")
if(noise){
train <- read.csv("../train_noisy.csv")
} else{
train <- read.csv("../train.csv")
}
noise <- TRUE
if(noise){
train <- read.csv("../train_noisy.csv")
} else{
train <- read.csv("../train.csv")
}
noise <- FALSE
if(noise){
train <- read.csv("../train_noisy.csv")
} else{
train <- read.csv("../train.csv")
}
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/invidivual_chain_metrics.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Master/Experiments/Kepler/Extended/invidivual_chain_metrics.R")
